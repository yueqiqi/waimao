{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\醉品茶城\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\醉品茶城\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\醉品茶城\\vue_app_00\\node_modules\\vue2-countdown\\lib\\vue2-countdown.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\醉品茶城\\vue_app_00\\node_modules\\vue2-countdown\\lib\\vue2-countdown.vue","mtime":1499771533000},{"path":"C:\\Users\\Administrator\\Desktop\\醉品茶城\\vue_app_00\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534853416000},{"path":"C:\\Users\\Administrator\\Desktop\\醉品茶城\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\Users\\Administrator\\Desktop\\醉品茶城\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  replace: true,\n  data: function data() {\n    return {\n      tipShow: true,\n      msTime: {\n        //倒计时数值\n        show: false,\n        //倒计时状态\n        day: '',\n        //天\n        hour: '',\n        //小时\n        minutes: '',\n        //分钟\n        seconds: '' //秒\n\n      },\n      star: '',\n      //活动开始时间\n      end: '',\n      //活动结束时间\n      current: '' //当前时间\n\n    };\n  },\n  watch: {\n    currentTime: function currentTime(val, oldval) {\n      this.gogogo();\n    }\n  },\n  props: {\n    //距离开始提示文字\n    tipText: {\n      type: String,\n      default: '距离开始'\n    },\n    //距离结束提示文字\n    tipTextEnd: {\n      type: String,\n      default: '距离结束'\n    },\n    //时间控件ID\n    id: {\n      type: String,\n      default: '1'\n    },\n    //当前时间\n    currentTime: {\n      type: Number\n    },\n    // 活动开始时间\n    startTime: {\n      type: Number\n    },\n    // 活动结束时间\n    endTime: {\n      type: Number\n    },\n    // 倒计时结束显示文本\n    endText: {\n      type: String,\n      default: '已结束'\n    },\n    //自定义显示文字:天\n    dayTxt: {\n      type: String,\n      default: ':'\n    },\n    //自定义显示文字:时\n    hourTxt: {\n      type: String,\n      default: ':'\n    },\n    //自定义显示文字:分\n    minutesTxt: {\n      type: String,\n      default: ':'\n    },\n    secondsTxt: {\n      type: String,\n      default: ':'\n    },\n    //是否开启秒表倒计，未完成\n    secondsFixed: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted: function mounted() {\n    console.log(this);\n    this.gogogo();\n  },\n  methods: {\n    gogogo: function gogogo() {\n      var _this = this;\n\n      //判断是秒还是毫秒\n      this.startTime.toString().length == 10 ? this.star = this.startTime * 1000 : this.star = this.startTime;\n      this.endTime.toString().length == 10 ? this.end = this.endTime * 1000 : this.end = this.endTime;\n\n      if (this.currentTime) {\n        this.currentTime.toString().length == 10 ? this.current = this.currentTime * 1000 : this.current = this.currentTime;\n      } else {\n        this.current = new Date().getTime();\n      }\n\n      if (this.end < this.current) {\n        /**\n         * 结束时间小于当前时间 活动已结束\n         */\n        this.msTime.show = false;\n        this.end_message();\n      } else if (this.current < this.star) {\n        /**\n         * 当前时间小于开始时间 活动尚未开始\n         */\n        this.$set(this, 'tipShow', true);\n        setTimeout(function () {\n          _this.runTime(_this.star, _this.current, _this.start_message);\n        }, 1);\n      } else if (this.end > this.current && this.star < this.current || this.star == this.current) {\n        /**\n         * 结束时间大于当前并且开始时间小于当前时间，执行活动开始倒计时\n         */\n        this.$set(this, 'tipShow', false);\n        this.msTime.show = true;\n        this.$emit('start_callback', this.msTime.show);\n        setTimeout(function () {\n          _this.runTime(_this.end, _this.star, _this.end_message, true);\n        }, 1);\n      }\n    },\n    runTime: function runTime(startTime, endTime, callFun, type) {\n      var _this2 = this;\n\n      var msTime = this.msTime;\n      var timeDistance = startTime - endTime;\n\n      if (timeDistance > 0) {\n        this.msTime.show = true;\n        msTime.day = Math.floor(timeDistance / 86400000);\n        timeDistance -= msTime.day * 86400000;\n        msTime.hour = Math.floor(timeDistance / 3600000);\n        timeDistance -= msTime.hour * 3600000;\n        msTime.minutes = Math.floor(timeDistance / 60000);\n        timeDistance -= msTime.minutes * 60000; //是否开启秒表倒计,未完成\n        //                    this.secondsFixed ? msTime.seconds = new Number(timeDistance / 1000).toFixed(2) : msTime.seconds = Math.floor( timeDistance / 1000 ).toFixed(0);\n\n        msTime.seconds = Math.floor(timeDistance / 1000).toFixed(0);\n        timeDistance -= msTime.seconds * 1000;\n\n        if (msTime.hour < 10) {\n          msTime.hour = \"0\" + msTime.hour;\n        }\n\n        if (msTime.minutes < 10) {\n          msTime.minutes = \"0\" + msTime.minutes;\n        }\n\n        if (msTime.seconds < 10) {\n          msTime.seconds = \"0\" + msTime.seconds;\n        }\n\n        var _s = Date.now();\n\n        var _e = Date.now();\n\n        var diffPerFunc = _e - _s;\n        setTimeout(function () {\n          if (type) {\n            _this2.runTime(_this2.end, endTime += 1000, callFun, true);\n          } else {\n            _this2.runTime(_this2.star, endTime += 1000, callFun);\n          }\n        }, 1000 - diffPerFunc);\n      } else {\n        callFun();\n      }\n    },\n    start_message: function start_message() {\n      var _this3 = this;\n\n      this.$set(this, 'tipShow', false);\n      this.$emit('start_callback', this.msTime.show);\n      setTimeout(function () {\n        _this3.runTime(_this3.end, _this3.star, _this3.end_message, true);\n      }, 1);\n    },\n    end_message: function end_message() {\n      this.msTime.show = false;\n\n      if (this.currentTime <= 0) {\n        return;\n      }\n\n      this.$emit('end_callback', this.msTime.show);\n    }\n  }\n};",{"version":3,"sources":["vue2-countdown.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <p v-if=\"msTime.show\">\n      <!--<span v-if=\"tipShow\">{{tipText}}:</span>-->\n      <!--<span v-if=\"!tipShow\">{{tipTextEnd}}:</span>-->\n      <span v-if=\"msTime.day>0\"><span>{{msTime.day}}</span><i>{{dayTxt}}</i></span>\n      <span>{{msTime.hour}}</span><i>{{hourTxt}}</i>\n      <span>{{msTime.minutes}}</span><i>{{minutesTxt}}</i>\n      <span>{{msTime.seconds}}</span><i>{{secondsTxt}}</i>\n    </p>\n    <!--<p v-if=\"!msTime.show\">{{endText}}</p>-->\n  </div>\n</template>\n<script>\n  export default {\n    replace: true,\n    data () {\n      return {\n        tipShow: true,\n        msTime: {\t\t\t//倒计时数值\n          show: false,\t\t//倒计时状态\n          day: '',\t\t\t//天\n          hour: '',\t\t//小时\n          minutes: '',\t\t//分钟\n          seconds: ''\t\t//秒\n        },\n        star: '',\t\t\t//活动开始时间\n        end: '',\t\t\t\t//活动结束时间\n        current: '',         //当前时间\n      }\n    },\n    watch: {\n      currentTime: function (val, oldval) {\n        this.gogogo();\n      }\n    },\n    props: {\n      //距离开始提示文字\n      tipText: {\n        type: String,\n        default: '距离开始'\n      },\n      //距离结束提示文字\n      tipTextEnd: {\n        type: String,\n        default: '距离结束'\n      },\n      //时间控件ID\n      id: {\n        type: String,\n        default: '1'\n      },\n      //当前时间\n      currentTime: {\n        type: Number\n      },\n      // 活动开始时间\n      startTime: {\n        type: Number\n      },\n      // 活动结束时间\n      endTime: {\n        type: Number\n      },\n      // 倒计时结束显示文本\n      endText: {\n        type: String,\n        default: '已结束'\n      },\n      //自定义显示文字:天\n      dayTxt: {\n        type: String,\n        default: ':'\n      },\n      //自定义显示文字:时\n      hourTxt: {\n        type: String,\n        default: ':'\n      },\n      //自定义显示文字:分\n      minutesTxt: {\n        type: String,\n        default: ':'\n      },\n      secondsTxt: {\n        type: String,\n        default: ':'\n      },\n      //是否开启秒表倒计，未完成\n      secondsFixed: {\n        type: Boolean,\n        default: false\n      },\n    },\n    mounted () {\n      console.log(this)\n      this.gogogo();\n    },\n    methods: {\n      gogogo: function () {\n        //判断是秒还是毫秒\n        this.startTime.toString().length == 10 ? this.star = this.startTime * 1000 : this.star = this.startTime;\n        this.endTime.toString().length == 10 ? this.end = this.endTime * 1000 : this.end = this.endTime;\n        if (this.currentTime) {\n          this.currentTime.toString().length == 10 ? this.current = this.currentTime * 1000 : this.current = this.currentTime;\n        } else {\n          this.current = ( new Date() ).getTime();\n        }\n\n        if (this.end < this.current) {\n          /**\n           * 结束时间小于当前时间 活动已结束\n           */\n          this.msTime.show = false;\n          this.end_message();\n        }\n        else if (this.current < this.star) {\n          /**\n           * 当前时间小于开始时间 活动尚未开始\n           */\n          this.$set(this, 'tipShow', true);\n          setTimeout(() => {\n            this.runTime(this.star, this.current, this.start_message);\n          }, 1);\n        }\n        else if (this.end > this.current && this.star < this.current || this.star == this.current) {\n          /**\n           * 结束时间大于当前并且开始时间小于当前时间，执行活动开始倒计时\n           */\n          this.$set(this, 'tipShow', false);\n          this.msTime.show = true;\n          this.$emit('start_callback', this.msTime.show);\n          setTimeout(() => {\n            this.runTime(this.end, this.star, this.end_message, true)\n          }, 1);\n        }\n      },\n      runTime (startTime, endTime, callFun, type) {\n        let msTime = this.msTime;\n        let timeDistance = startTime - endTime;\n        if (timeDistance > 0) {\n          this.msTime.show = true;\n          msTime.day = Math.floor(timeDistance / 86400000);\n          timeDistance -= msTime.day * 86400000;\n          msTime.hour = Math.floor(timeDistance / 3600000);\n          timeDistance -= msTime.hour * 3600000;\n          msTime.minutes = Math.floor(timeDistance / 60000);\n          timeDistance -= msTime.minutes * 60000;\n          //是否开启秒表倒计,未完成\n//                    this.secondsFixed ? msTime.seconds = new Number(timeDistance / 1000).toFixed(2) : msTime.seconds = Math.floor( timeDistance / 1000 ).toFixed(0);\n          msTime.seconds = Math.floor(timeDistance / 1000).toFixed(0);\n          timeDistance -= msTime.seconds * 1000;\n\n          if (msTime.hour < 10) {\n            msTime.hour = \"0\" + msTime.hour;\n          }\n          if (msTime.minutes < 10) {\n            msTime.minutes = \"0\" + msTime.minutes;\n          }\n          if (msTime.seconds < 10) {\n            msTime.seconds = \"0\" + msTime.seconds;\n          }\n          let _s = Date.now();\n          let _e = Date.now();\n          let diffPerFunc = _e - _s;\n          setTimeout(() => {\n            if (type) {\n              this.runTime(this.end, endTime += 1000, callFun, true);\n            } else {\n              this.runTime(this.star, endTime += 1000, callFun);\n            }\n          }, 1000 - diffPerFunc)\n        }\n        else {\n          callFun();\n        }\n      },\n      start_message () {\n        this.$set(this, 'tipShow', false);\n        this.$emit('start_callback', this.msTime.show);\n        setTimeout(() => {\n          this.runTime(this.end, this.star, this.end_message, true)\n        }, 1);\n      },\n      end_message(){\n        this.msTime.show = false;\n        if (this.currentTime <= 0) {\n          return;\n        }\n        this.$emit('end_callback', this.msTime.show);\n      }\n    }\n  }\n</script>\n"],"sourceRoot":"node_modules\\vue2-countdown\\lib"}]}